/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tutorial;

import java.util.List;

import org.checkerframework.checker.units.qual.s;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public class App {

    public static void main(String[] args) throws Exception {
        // Flux.just("Hello", "World", "/", "df")
        // .map(e -> {
        // System.out.println("Mapping " + e + System.nanoTime());
        // e = e.toUpperCase();
        // System.out.println("Mapping " + e + System.nanoTime());
        // return e;
        // }).subscribe(System.out::println);

        // List.of("Hello", "World")
        // .stream()
        // .map(e -> {
        // System.out.println("Mapping " + e + System.nanoTime());
        // e = e.toUpperCase();
        // System.out.println("Mapping " + e + System.nanoTime());
        // return e;
        // })
        // .forEach(System.out::println);

        // Mono.just("hello world")
        // .subscribe(
        // none -> System.out.println(none),
        // error -> System.out.println("error"),
        // () -> System.out.println("complete"));

        // Mono.empty()
        // .subscribe(
        // none -> System.out.println("none"),
        // error -> System.out.println("error"),
        // () -> System.out.println("complete"));

        List<String> list = List.of("Hello", "World", "/", "df");
        Flux<String> flux = Flux.fromIterable(list);
        long start = 0;
        long end = 0;

        start = System.nanoTime();

        list.stream().map(e -> {
            long start1 = System.nanoTime();
            e = e.toUpperCase();
            long end1 = System.nanoTime();
            System.out.println("Mapping " + e + " took " + (end1 - start1));
            return e;
        }).forEach(System.out::println);

        end = System.nanoTime();

        System.out.println("Flux Total time: " + (end - start));

        System.out.println("=====================================");

        start = System.nanoTime();

        flux.map(e -> {
            long start1 = System.nanoTime();
            e = e.toUpperCase();
            long end1 = System.nanoTime();
            System.out.println("Mapping " + e + " took " + (end1 - start1));
            return e;
        })
                .subscribe(System.out::println);

        end = System.nanoTime();

        System.out.println("List Total time: " + (end - start));
    }

}
